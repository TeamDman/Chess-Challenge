using System;
using System.Linq;
using ChessChallenge.API;

public class MyBot : IChessBot
{
    private NeuralNetwork network;
    public MyBot()
    {
        // store the weights in a long value, with every 8 bits being a separate weight
        var weightsPacked = new ulong[]{
9191159041496875921, 10052740862267658360, 8895593853055956351, 9906107814340165253, 9043947632920461442, 8901233252824676477, 8681411152511267977, 8896444918255486597, 8901504918011542917, 8613857274030163844, 9043640954942948228, 9329628340325874043, 9835997330791952763, 10051058614072867956, 9112880487843201645, 9183838523041484655, 9544945693584884857, 9905816387942318450, 8466908571509621375, 9263493776687988597, 8754844291428741773, 9407607822537166203, 9042251159242771085, 10267216002925299326, 10053310297839993737, 10482268374049783161, 8326738392432540540, 7889605559190064519, 7957157363268024439, 9476838537366631789, 8536709920526662521, 9694713419348733313, 8174452823963431295, 9764788572716036736, 7814172541480109711, 8391766787427429757, 9834035836607693447, 8174173560910939511, 9182977648354161017, 9473184869070107513, 10271444720063444608, 8613577942191735435, 10340971208506249079, 10341801318560793724, 9261492661061849482, 8319393723997260426, 9472057951020287617, 9832060026594494600, 10053595088497179250, 8687311269444093055, 8686165552893819517, 10192642700561912195, 8605968256843872125, 9115152117505560707, 10128163988399556725, 8250158515927416954, 10121700032638388362, 8754302249359606911, 10054700110450490235, 9045069186287039619, 8107743185495491978, 8679138569585984636, 8971892328051346811, 8183189586490395764, 9047599166821528701, 8324200788297938320, 9475151908425140111, 8612128846432862856, 8175596195528085387, 10123935254095886463, 9830931893437820273, 9327637051451075457, 8541761175509240180, 8757390734789936520, 9188316846870662029, 9189472450386883968, 9117113616150197631, 8392612393674504331, 9192557637533863042, 9760553288000893809, 10121124863770917521, 8968775169234144897, 8823545007731279988, 8680275421289416301, 8175021181178509689, 8034285874583864199, 8393990124340742786, 9981792662878586251, 8754307730006176624, 8684479996938579053, 9977021834429298551, 8324756067691688574, 9332157173850274170, 9904680575081873290, 8756532076154224770, 8608763236692754310, 9401981728944657039, 8181484166195018880, 9691030029624836231, 9761420867115185274, 9547211752991654279, 8397380970973660791, 9328511163228386440, 10194592126205525377, 7957731320937215616, 9112631984979015805, 10558537012007761296, 9116553960234845582, 9042231307769315956, 8468861373265313673, 9550319990340225668, 10193184708171826297, 8828608332093225610, 9768724910326249598, 9624062182303236232, 8470299491105207680, 8469160341459142016, 9407024016138140282, 9403658359171744888, 8321676258228274297, 8612147447700423564, 9694147166565600123, 9256743934933302921, 9184403757952170373, 9405059197348254327, 9835156290396781431, 8686473334345464963, 8612990742936912523, 9909467840287048835, 8968501352452225399, 9910606925626048121, 9981530892994383483, 10051623719865451141, 9406762409731716991, 10268912514872348037, 9833475136799406733, 9550603728880828529, 9046190696318730097, 8254091554919517043, 8896731796032162677, 7960535036833264239, 10266364924871149458, 8179529273274560130, 8394014184915108994, 9904396879523840385, 8468888839279641453, 9331585367641847946, 8327868819217350004, 9187767121054893700, 9542700409119084657, 8751770005747240051, 8827765040783388269, 9043068070443641986, 7890150938550436747, 8971017052151706762, 9548052861954785929, 8758228575502695303, 9905526082613179271, 8610179403592136322, 8828321368215091850, 8182906947309568123, 8687039642894960499, 8827486834395284872, 8253829845565148272, 8107736648454209164, 9404483005726362993, 7818088967486926206, 8899811639855514757, 9183831977259855213, 8969344725132346500, 10122254190777038472, 8831146052141943933, 9112338394285506678, 9118804686357034613, 9546650937335776382, 8965941723859743885, 8823538428160866445, 8178687077383764106, 10407402537287057530, 7885646213256284293, 9261773066558210428, 9615620106172598134, 9259830122222219134, 8251849556303709576, 8535289364622047606, 8245109579773017202, 10271715140113695355, 10197977556582042227, 9617308969388373640, 10125073321545204360, 8179812977592861071, 8533888706833909385, 9403665033836265354, 8755708567614025853, 10126215705721276808, 9116548415415481460, 9331616287344856720, 8031163270352306817, 10631181822077729416, 9331604128225983853, 9115713903604433015, 9184962292309459845, 8972998329205944441, 8466076224413205643, 9117122455342707580, 9838551461893079943, 9471192652751338633, 9330184619976852857, 8537281718245683056, 8103804816498783602, 8751753577330019192, 8464104773925637232, 7890182841163482990, 8250431280910665849, 7813594138133300111, 8969897732320296590, 8969884537978647176, 9184105742570260342, 8324185382284063603, 10048812316096296842, 9115415905889584774, 9978131293570301312, 8389210513154281605, 7891836438235676034, 8467461604366249856, 8902908968170520180, 8901765446299123568, 9189466923047354479, 8828876604105590400, 9254478872211062917, 8461848662132882290, 9041396804447471222, 8181784303088463748, 9759154696676537977, 8103797076867447930, 8613540528898732939, 9332737754661743996, 9186919444549172607, 8392031920019304335, 8036249688568525934, 8249053515045832835, 9327665681971247985, 9045068120649660036, 9984074145227307653, 10482842336181716100, 8324761547985026702, 10270589257605416824, 10196848337050828420, 9405919075638277002, 9185785792243732342, 8180923423888468865, 10051622590389847688, 10198527286811136131, 8612709379579606666, 9906097837266466174, 9905253420641649547, 8247906724871896707, 9624058802583406727, 8969893428628846465, 8538129398879646581, 9550027623727137905, 9761139306406904180, 10558562394912290436, 9762821524654489981, 8825815525096849275, 7895819981546029426, 10047676409050661246, 10202469010511006588, 9622363398638300782, 8101282447115320204, 9620395190984018546, 8180082379466832001, 8749219186049256851, 10271718451381632875, 7599974421985848681, 10487921990127226502, 8176136081558179696, 8759075186602967657, 8612436593371932524, 10195153938093281657, 8687887409074307964, 8898393334147675790, 8040459808651902838, 8613007239972949904, 10628088905045543543, 10411067316831360379, 10624141520628838550, 9842741678944780432, 8246791901784872591, 8034277194874981236, 8245950783794747241, 8682825137215009668, 8679166052880717436, 10125358017662973337, 9408434740609914476, 7750270072514906761, 10338168484530713724, 8893911651853632626, 9120791448438468234, 7605579853261802388, 9325708589560261762, 7893242838193898124, 9985442916727680624, 9480211895093793924, 10337029442155540856, 8543194938706063490, 8544039359325507432, 8897575250066567802, 8329245343753801607, 8831414173879337092, 9834295239697857938, 9624871392963367041, 10055541176749489284, 7671455829081821808, 10416972682047946624, 10702958980889806447, 7599144424587555204, 8327835834137800055, 9902407854265112440, 7603087268856501649, 7745478383389740402, 10558258801187516811, 10129586726766470766, 8105472741060087917, 9977867286292369549, 11063539339247847302, 11059882398101706866, 7894399438526843534, 9403954166855866228, 8753722866862946704, 8610199220519726485, 9549483326951429015, 8535599495587858061, 8178688060780674159, 7672860008443582062, 8100979080692529523, 7894669995931702131, 8974409097012672912, 8397681154762180463, 9470101988519809667, 9117701841668114542, 8972412268017127548, 8101533190964477301, 8968193566321709420, 9623471581167380861, 8965670144637300356, 8034821491415084903, 8388949993539400309, 9615318840238567545, 9837127736353188741, 7676794117164862841, 10189801574963843192, 10629784192777487502, 10057803950204284291, 8828018955391500405, 9259815816037103217, 8618083672409536903, 8678033500421127287, 10919961936963138171, 9692189980335374217, 8254962355493897100, 8898404166237450905, 9624068693425745802, 9264902169496155771, 9114571527984738961, 8028111163292940650, 10769636660439384693, 7672313559787407473, 8605942951164410744, 8608773128034874242, 8329825885877736569, 9549762675988727435, 7812505716513739630, 10127630759888713833, 9687125646622223734, 9257551925422360175, 10194017038893480559, 9399997054171317131, 9263753351743242347, 9477681906306159245, 7739599140669713285, 8107195732001394284, 10700409230085093761, 8177001375733289096, 9120476923467756689, 9402824967894035351, 9479100379031639916, 9900735574573810069, 9839959974572950913, 11066901753632488049, 8251570284646396304, 7740688756239931033, 10627801859479529612, 10053853486849758341, 9550044004901876881, 8532197589328952722, 10483408554485902463, 8686732870745616014, 8250717063671608700, 10557973060907660401, 8541204809640809625, 9686525399726064243, 8394282586046822541, 9769281125988797567, 9118271337301443439, 8469188945573153674, 10838327541214447730, 8031462389037239934, 8972711407789965949, 10623863485466830197, 8037940663985270378, 9108651697403428488, 8467465001685511782, 10342942520999241324, 7823996639320175494, 9041407837867448454, 10121967162224250499, 9552817166233203080, 8682807575647128685, 7315983792735621235, 10490162764658541945, 10559679533421203062, 10556556735244767122, 7962513200171612545, 10623290563002528140, 10263831581713920127, 8830591902375247996, 8326172097201270142, 7672303595496634769, 7455301854663304819, 10406552687376690553, 10268918025548496775, 8902603239614416486, 9762237808332869012, 10203030792100934265, 9910878543970728305, 10779244179454587756, 10123104121671087756, 8100963691907935089, 9183272252828912743, 10117758146032077431, 9836845097089592965, 9984053293095420052, 9614740393890053238, 9550840128007797105, 8542899166321478515, 8102110413009031306, 8977239278498247279, 10628662815069009298, 10197399089280871558, 9403635286909422224, 7963067285294772846, 8683105633460195709, 9906400172831248238, 8173888671031069807, 8028634461991764858, 7524540253776875888, 7607270790123329157, 8102098258926140043, 8830549038364990077, 8615530571680544401, 7749973097352296844, 10480310203919793800, 10414737482048433266, 10407975520436121730, 9039979495404832665, 9545802264564562840, 8976657516653540492, 10487058911599364753, 9687125638551464074, 10992016177018608993, 41222278292924304
        };

        // convert to floats
        // var weights = new float[weightsPacked.Length*(64/8)];
        // for (int i=0; i<weightsPacked.Length; i++)
        // {
        //     long weight = weightsPacked[i];
        //     int j = i*(64/8);
        //     weights[j] = (weight & 0xFF) / 255f;
        //     weights[j+1] = ((weight >> 8) & 0xFF) / 255f;
        //     weights[j+2] = ((weight >> 16) & 0xFF) / 255f;
        //     weights[j+3] = ((weight >> 24) & 0xFF) / 255f;
        //     weights[j+4] = ((weight >> 32) & 0xFF) / 255f;
        //     weights[j+5] = ((weight >> 40) & 0xFF) / 255f;
        //     weights[j+6] = ((weight >> 48) & 0xFF) / 255f;
        //     weights[j+7] = ((weight >> 56) & 0xFF) / 255f;
        // }


        // convert to floats (shorter)
        var weights = new float[weightsPacked.Length * 8];
        for (int i = 0; i < weightsPacked.Length; i++)
        {
            for (int b = 0; b < 8; b++)
            {
                // weights[i * 8 + b] = ((weightsPacked[i] >> (b * 8)) & 0xFF) / 255f;
                weights[i * 8 + b] = ((weightsPacked[i] >> (b * 8)) & 0xFF) / 255f * 2 - 1;
            }
        }
        // Console.WriteLine("Loaded " + weights.Length + " weights.");
        network = new NeuralNetwork(new int[] { 65, 32, 30, 21, 1 }, weights);

        // #region debug
        // test to compare python encoding
        // string fen = "rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq d3 0 1";
        // var board = Board.CreateBoardFromFEN(fen);
        // var inputs = new float[64];
        // for (int i = 0; i < 64; i++)
        // {
        //     var piece = board.GetPiece(new Square(i));
        //     inputs[i] = (byte)piece.PieceType * (piece.IsWhite ? 1 : -1);
        // }
        // Console.WriteLine("Inputs: " + string.Join(", ", inputs.Select(val => val.ToString("0.000"))));
        // #endregion

    }
    public Move Think(Board board, Timer timer)
    {
        var scores = board.GetLegalMoves().Select(move =>
        {
            board.MakeMove(move);
            var score = network.FeedForward(board)[0];

            // #region debug
            //// make score random
            // score = (float)(score + (new Random().NextDouble() - 0.5) * 0.1);
            // Console.WriteLine($"score {score}");
            // #endregion

            board.UndoMove(move);
            return (move, score);
        });

        // #region debug
        // Console.WriteLine("Scores: " + string.Join(", ", scores.Select(pair => pair.score.ToString("0.000"))));
        // #endregion

        return scores.MaxBy(pair => pair.score).move;
    }

}

public class NeuralNetwork
{
    private int[] layerSizes;
    private int totalLayers;
    private float[][] biases;
    private float[][][] weights;

    public NeuralNetwork(int[] layerSizes, float[] serializedModel)
    {

        // #region debug
        // int expectedSize = 0;
        // for (int i = 1; i < layerSizes.Length; i++)
        // {
        //     // The size of each layer is the product of its size and the size of the previous layer (for weights)
        //     // plus its own size (for biases)
        //     expectedSize += layerSizes[i] * layerSizes[i - 1] + layerSizes[i];
        // }

        // System.Diagnostics.Debug.Assert(expectedSize < serializedModel.Length, "The serialized model does not match the expected size based on the layer configuration. (" + expectedSize + " != " + serializedModel.Length + ")");
        // if (expectedSize != serializedModel.Length)
        //     Console.WriteLine("Warning: The serialized model does not match the expected size based on the layer configuration. (" + expectedSize + " != " + serializedModel.Length + ")");
        // #endregion

        this.layerSizes = layerSizes;
        totalLayers = layerSizes.Length;
        biases = new float[totalLayers][];
        weights = new float[totalLayers][][];

        int position = 0;
        for (int layer = 1; layer < totalLayers; layer++)
        {
            biases[layer] = new float[layerSizes[layer]];
            for (int i = 0; i < biases[layer].Length; i++)
            {
                biases[layer][i] = serializedModel[position++];
            }

            weights[layer] = new float[layerSizes[layer]][];
            for (int i = 0; i < weights[layer].Length; i++)
            {
                weights[layer][i] = new float[layerSizes[layer - 1]];
                for (int j = 0; j < weights[layer][i].Length; j++)
                {
                    weights[layer][i][j] = serializedModel[position++];
                }
            }
        }
    }

    public float[] FeedForward(Board board)
    {
        var inputs = new float[65];
        for (int i = 0; i < 64; i++)
        {
            var piece = board.GetPiece(new Square(i));
            inputs[i] = (byte)piece.PieceType * (piece.IsWhite ? 1 : -1);
        }
        inputs[64] = board.IsWhiteToMove ? 1 : -1;

        // #region debug
        // // send a rest to localhost:8000 with { inputs } json payload to get the result
        // var client = new System.Net.WebClient();
        // client.Headers.Add("Content-Type", "application/json");
        // var result = client.UploadString("http://localhost:8000", "{ \"inputs\": [" + string.Join(", ", inputs.Select(val => val.ToString("0.000"))) + "] }");
        // Console.WriteLine($"got result {result}");
        // return result.Split(',').Select(val => float.Parse(val)).ToArray();

        
        // #endregion


        var a = inputs;
        for (int layer = 1; layer < totalLayers; layer++)
        {
            var z = new float[layerSizes[layer]];
            for (int i = 0; i < z.Length; i++)
            {
                z[i] = biases[layer][i];
                for (int j = 0; j < weights[layer][i].Length; j++)
                {
                    z[i] += weights[layer][i][j] * a[j];
                }
            }

            a = Sigmoid(z);
        }

        return a;
    }

    float[] Sigmoid(float[] z) => z.Select(val => 1f / (1f + (float)Math.Exp(-val))).ToArray();
}
