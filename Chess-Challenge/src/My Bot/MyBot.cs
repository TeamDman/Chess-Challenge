using System;
using System.Linq;
using ChessChallenge.API;

public class MyBot : IChessBot
{
    private NeuralNetwork network;
    public MyBot()
    {
        // store the weights in a long value, with every 8 bits being a separate weight
        var weightsPacked = new long[]{
            9223372036854775807,
            0000000000000000000,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
            1111111111111111111,
        };

        // convert to floats
        // var weights = new float[weightsPacked.Length*(64/8)];
        // for (int i=0; i<weightsPacked.Length; i++)
        // {
        //     long weight = weightsPacked[i];
        //     int j = i*(64/8);
        //     weights[j] = (weight & 0xFF) / 255f;
        //     weights[j+1] = ((weight >> 8) & 0xFF) / 255f;
        //     weights[j+2] = ((weight >> 16) & 0xFF) / 255f;
        //     weights[j+3] = ((weight >> 24) & 0xFF) / 255f;
        //     weights[j+4] = ((weight >> 32) & 0xFF) / 255f;
        //     weights[j+5] = ((weight >> 40) & 0xFF) / 255f;
        //     weights[j+6] = ((weight >> 48) & 0xFF) / 255f;
        //     weights[j+7] = ((weight >> 56) & 0xFF) / 255f;
        // }


        // convert to floats (shorter)
        var weights = new float[weightsPacked.Length * 8];
        for (int i = 0; i < weightsPacked.Length; i++)
        {
            for (int b = 0; b < 8; b++)
            {
                weights[i * 8 + b] = ((weightsPacked[i] >> (b * 8)) & 0xFF) / 255f;
            }
        }
        Console.WriteLine("Loaded " + weights.Length + " weights.");
        network = new NeuralNetwork(new int[] { 64, 32, 30, 21, 1 }, weights);
    }
    public Move Think(Board board, Timer timer)
    {
        var scores = board.GetLegalMoves().Select(move =>
        {
            board.MakeMove(move);
            var score = network.FeedForward(board)[0];
            board.UndoMove(move);
            return (move, score);
        });

        return scores.MaxBy(pair => pair.score).move;
    }

}

public class NeuralNetwork
{
    private int[] layerSizes;
    private int totalLayers;
    private float[][] biases;
    private float[][][] weights;

    public NeuralNetwork(int[] layerSizes, float[] serializedModel)
    {

        int expectedSize = 0;
        for (int i = 1; i < layerSizes.Length; i++)
        {
            // The size of each layer is the product of its size and the size of the previous layer (for weights)
            // plus its own size (for biases)
            expectedSize += layerSizes[i] * layerSizes[i - 1] + layerSizes[i];
        }

        System.Diagnostics.Debug.Assert(expectedSize < serializedModel.Length, "The serialized model does not match the expected size based on the layer configuration. (" + expectedSize + " != " + serializedModel.Length + ")");
        if (expectedSize != serializedModel.Length)
            Console.WriteLine("Warning: The serialized model does not match the expected size based on the layer configuration. (" + expectedSize + " != " + serializedModel.Length + ")");


        this.layerSizes = layerSizes;
        totalLayers = layerSizes.Length;
        biases = new float[totalLayers][];
        weights = new float[totalLayers][][];

        int position = 0;
        for (int layer = 1; layer < totalLayers; layer++)
        {
            biases[layer] = new float[layerSizes[layer]];
            for (int i = 0; i < biases[layer].Length; i++)
            {
                biases[layer][i] = serializedModel[position++];
            }

            weights[layer] = new float[layerSizes[layer]][];
            for (int i = 0; i < weights[layer].Length; i++)
            {
                weights[layer][i] = new float[layerSizes[layer - 1]];
                for (int j = 0; j < weights[layer][i].Length; j++)
                {
                    weights[layer][i][j] = serializedModel[position++];
                }
            }
        }
    }

    public float[] FeedForward(Board board)
    {
        var inputs = new float[64];
        for (int i = 0; i < 64; i++)
        {
            var piece = board.GetPiece(new Square(i));
            inputs[i] = (byte)piece.PieceType * (piece.IsWhite ? 1 : -1);
        }


        var a = inputs;
        for (int layer = 1; layer < totalLayers; layer++)
        {
            var z = new float[layerSizes[layer]];
            for (int i = 0; i < z.Length; i++)
            {
                z[i] = biases[layer][i];
                for (int j = 0; j < weights[layer][i].Length; j++)
                {
                    z[i] += weights[layer][i][j] * a[j];
                }
            }

            a = Sigmoid(z);
        }

        return a;
    }

    float[] Sigmoid(float[] z) => z.Select(val => 1f / (1f + (float)Math.Exp(-val))).ToArray();
}
